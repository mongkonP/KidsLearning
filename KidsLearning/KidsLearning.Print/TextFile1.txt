   #region PrintFromSentences_ThisThat
       
        public void PrintFromSentences_ThisThat(int count = 10)
        {

            _ReportToppic = "ฝึกเขียน และ อ่านคำศัพท์ต่อไปนี้";


            System.Windows.Forms.PrintDialog printDialog = new System.Windows.Forms.PrintDialog();
            printDialog.Document = _printDocument;
            printDialog.UseEXDialog = true;
            ic = 0;
            //Get the document
            if (System.Windows.Forms.DialogResult.OK == printDialog.ShowDialog())
            {
                bNewPage = true;
                bMorePagesToPrint = true;
                iPageAll = count;
                iPage = 1;

                FileInfo existingFile = new FileInfo(System.Windows.Forms.Application.StartupPath + @"\File\Book\Eng Sentences_1.xlsx");
                ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {
                    //get the first worksheet in the workbook
                    lstLike = new List<string>();
                    lstEat = new List<string>();
                    lstThatThis = new List<string>();
                    lstIsAmAre = new List<string>();
                    lstPlay = new List<string>();
                    lstHaveHas = new List<string>();
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[0];//EAT
                    int colCount = worksheet.Dimension.End.Column;  //get Column Count
                    int rowCount = worksheet.Dimension.End.Row;     //get row count

                    for (int row = 2; row <= rowCount; row++)
                    {


                        if (!string.IsNullOrEmpty(worksheet.Cells[row, 1].Value?.ToString().Trim()))
                        {
                            if (!worksheet.Cells[row, 1].Value.ToString().Trim().Contains(" "))
                            {
                                lstLike.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstEat.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstThatThis.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstHaveHas.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());

                            }

                        }
                    }
                    worksheet = package.Workbook.Worksheets[1];//ห้องต่างๆ ในโรงเรียน
                    colCount = worksheet.Dimension.End.Column;  //get Column Count
                    rowCount = worksheet.Dimension.End.Row;     //get row count

                    for (int row = 2; row <= rowCount; row++)
                    {


                        if (!string.IsNullOrEmpty(worksheet.Cells[row, 1].Value?.ToString().Trim()))
                        {
                            if (!worksheet.Cells[row, 1].Value.ToString().Trim().Contains(" "))
                            {
                                lstLike.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstThatThis.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                            }

                        }
                    }

                    worksheet = package.Workbook.Worksheets[2];//อาชีพ
                    colCount = worksheet.Dimension.End.Column;  //get Column Count
                    rowCount = worksheet.Dimension.End.Row;     //get row count

                    for (int row = 2; row <= rowCount; row++)
                    {


                        if (!string.IsNullOrEmpty(worksheet.Cells[row, 1].Value?.ToString().Trim()))
                        {
                            if (!worksheet.Cells[row, 1].Value.ToString().Trim().Contains(" "))
                            {
                                lstIsAmAre.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());

                            }

                        }
                    }

                    worksheet = package.Workbook.Worksheets[3];//สัตว์
                    colCount = worksheet.Dimension.End.Column;  //get Column Count
                    rowCount = worksheet.Dimension.End.Row;     //get row count

                    for (int row = 2; row <= rowCount; row++)
                    {


                        if (!string.IsNullOrEmpty(worksheet.Cells[row, 1].Value?.ToString().Trim()))
                        {
                            if (!worksheet.Cells[row, 1].Value.ToString().Trim().Contains(" "))
                            {

                                lstLike.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstEat.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstThatThis.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstHaveHas.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                            }

                        }
                    }

                    worksheet = package.Workbook.Worksheets[4];//กีฬา
                    colCount = worksheet.Dimension.End.Column;  //get Column Count
                    rowCount = worksheet.Dimension.End.Row;     //get row count

                    for (int row = 2; row <= rowCount; row++)
                    {


                        if (!string.IsNullOrEmpty(worksheet.Cells[row, 1].Value?.ToString().Trim()))
                        {
                            if (!worksheet.Cells[row, 1].Value.ToString().Trim().Contains(" "))
                            {
                                lstLike.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                                lstPlay.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                            }

                        }
                    }

                    worksheet = package.Workbook.Worksheets[5];//สี
                    colCount = worksheet.Dimension.End.Column;  //get Column Count
                    rowCount = worksheet.Dimension.End.Row;     //get row count

                    for (int row = 2; row <= rowCount; row++)
                    {


                        if (!string.IsNullOrEmpty(worksheet.Cells[row, 1].Value?.ToString().Trim()))
                        {
                            if (!worksheet.Cells[row, 1].Value.ToString().Trim().Contains(" "))
                            {
                                lstLike.Add(worksheet.Cells[row, 1].Value?.ToString().Trim());
                            }

                        }
                    }

                };


                _printDocument.PrintPage += new PrintPageEventHandler(PrintFromSentences_ThisThatPrintPage);
                _printDocument.BeginPrint += new PrintEventHandler((o, s) =>
                {

                    bFirstPage = true;
                    bNewPage = true;
                });

                _printDocument.DocumentName = _ReportHeader + string.Format("{0:yyyyMMdd hhmmss}", DateTime.Now);
                _printDocument.Print();
            }

        }

        protected void PrintFromSentences_ThisThatPrintPage(object sender, PrintPageEventArgs e)
        {

            //Loop till all the grid rows not get printed
            if (bFirstPage) printDocumentNewPage(sender, e);
            // System.Windows.Forms.MessageBox.Show("page " + iPage);
            int yC = 150, xC = 100;
            int w = 100, h = 35;

            int count = 14;
            // DrawTable


            yC = 150; xC = 100;
            int rr;
            string s = "";
            for (int ip = 0; ip < 8; ip++)
            {
                xC = 100;
                rr = RandomNumber.Randomnumber(0, 5);

                //live at

                if (rr == 0)//  ...........  Like/give/need/see/want ...........
                {
                    s = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)] + "    " + vLike[RandomNumber.Randomnumber(0, vLike.Count - 1)] + "      " + lstLike[RandomNumber.Randomnumber(0, lstLike.Count - 1)];
                }
                else if (rr == 1)//  ...........  eat ...........
                {
                    s = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)] + "    eat      " + lstEat[RandomNumber.Randomnumber(0, lstEat.Count - 1)];
                }
                else if (rr == 2)//............ is/am/are ...............
                {
                    string ss = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)];

                    if (ss == "I")
                    {
                        s = ss + "   am     " + lstIsAmAre[RandomNumber.Randomnumber(0, lstIsAmAre.Count - 1)];
                    }
                    else if (ss == "We" || ss == "They")
                    {
                        s = ss + "   are     " + lstIsAmAre[RandomNumber.Randomnumber(0, lstIsAmAre.Count - 1)];
                    }
                    else
                    {
                        s = ss + "    is      " + lstIsAmAre[RandomNumber.Randomnumber(0, lstIsAmAre.Count - 1)];
                    }

                }
                else if (rr == 3) // that/this/These / Those is ................
                {

                    s = ttLike[RandomNumber.Randomnumber(0, ttLike.Count - 1)] + "    is      " + lstEat[RandomNumber.Randomnumber(0, lstEat.Count - 1)];

                }
                else if (rr == 4)  //have has
                {
                    string ss = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)];
                    if (ss == "I" || ss == "You" || ss == "We" || ss == "They")
                    {
                        s = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)] + "    have      " + lstHaveHas[RandomNumber.Randomnumber(0, lstHaveHas.Count - 1)];
                    }
                    else
                    {
                        s = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)] + "    has      " + lstHaveHas[RandomNumber.Randomnumber(0, lstHaveHas.Count - 1)];
                    }

                }
                else if (rr == 5)  //play
                {
                    s = n_1[RandomNumber.Randomnumber(0, n_1.Count - 1)] + "  play     " + lstPlay[RandomNumber.Randomnumber(0, lstPlay.Count - 1)];

                }
                e.Graphics.DrawString(" ประโยค ", fontDetail, new SolidBrush(Color.Black), xC + 20, yC + 5);
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle(xC + 20, yC + 8, 80, 25));
                e.Graphics.DrawString("   " + s, fontDetail, new SolidBrush(Color.Black), xC + 100, yC + 8);
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle(xC + 100, yC + 8, 400, 25));

                yC += 25;
                e.Graphics.DrawString(" คำอ่าน ", fontDetail, new SolidBrush(Color.Black), xC + 20, yC + 5);
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle(xC + 20, yC + 8, 80, 25));
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle(xC + 100, yC + 8, 400, 25));
                yC += 25;
                e.Graphics.DrawString(" คำแปล ", fontDetail, new SolidBrush(Color.Black), xC + 20, yC + 5);
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle(xC + 20, yC + 8, 80, 25));
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle(xC + 100, yC + 8, 400, 25));

                yC += 35;
            }


            yC += h; xC = 100;


            if (iPage > iPageAll - 1)
            {
                bNewPage = false;
                bMorePagesToPrint = false;
            }

            if (bNewPage)
            {
                printDocumentNewPage(sender, e);
            }

            iPage++;

            //If more lines exist, print another page.
            e.HasMorePages = (bMorePagesToPrint) ? true : false;
        }

        #endregion